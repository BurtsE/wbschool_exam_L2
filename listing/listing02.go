package main

import "fmt"

func test() (x int) {
	defer func() {
		x++
	}()
	x = 1
	return
}
func anotherTest() int {
	var x int
	defer func() {
		x++
	}()
	x = 1
	return x
}
func main() {
	fmt.Println(test())
	fmt.Println(anotherTest())
}

/*
Вывод :
2
1

defer кладет вызванную функцию в стек вызовов. Поскольку стек имеет формат FIFO, первым выполнится та отложенная функция, которая была вызвана последней.
defer имеет доступ к области видимости функции, в которой он объявлен, поэтому может менять значения переменных, находящихся в ней.
Инициализация значений, передаваемых отложенной функции происходит в момент определения, если значение переменной впоследствии изменилось,
необходимо использовать указатель или вызов анонимной функции, внутри которой использовать параметр. То же касается методов.

Выполнение отложенных функций происходит после того, как внешняя функция выполнит return. Поэтому anotherTest возвращает то значение x, которое
он имел на момент своего завершения.

В случае, когда возвращаемые параметры проименованы, defer имеет доступ непосредственно к возвращаемым параметрам и может изменить
их значение даже после завершения функции. Поэтому test возвращает значение 2
*/
