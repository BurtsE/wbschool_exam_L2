package main

import (
	"fmt"
	"math/rand"
	"time"
)

func asChan(vs ...int) <-chan int {
	c := make(chan int)
	go func() {
		for _, v := range vs {
			c <- v
			time.Sleep(time.Duration(rand.Intn(1000)) *
				time.Millisecond)
		}
		close(c)
	}()
	return c
}
func merge(a, b <-chan int) <-chan int {
	c := make(chan int)
	go func() {
		for {
			select {
			case v := <-a:
				c <- v
			case v := <-b:
				c <- v
			}
		}
	}()
	return c
}
func main() {
	a := asChan(1, 3, 5, 7)
	b := asChan(2, 4, 6, 8)
	c := merge(a, b)
	for v := range c {
		fmt.Println(v)
	}
}

/*
Вывод:
Числа от 1 до 8, после чего программа бесконечно будет печатать нули

При помощи фукнции asChan создаются каналы a и b, через них передается по 4 значения, после чего каналы закрываются.
Функция merge создает горутину, которая записывает данные из первых каналов в третий и использует select в бесконечном цикле, не проверяя, открыты ли каналы.
Значения из каналов записываются в новый канал по очереди,т.к. посылающие горутины засыпают после отправки на некоторое время.
После отправки всех 8 значений эта горутина бесконечно читает нулевое значение для типа int из одного из каналов и записывает его в созданный ею канал.
Этот канал также никогда не закрывается.
Главная функция читает данные при помощи range. Поскольку канал всегда открыт,
бесконечно продолжается чтение и печать записываемых в него нулей.
*/
